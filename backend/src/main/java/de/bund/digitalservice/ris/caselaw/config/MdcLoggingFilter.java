package de.bund.digitalservice.ris.caselaw.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.jetbrains.annotations.NotNull;
import org.slf4j.MDC;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.web.filter.OncePerRequestFilter;

class MdcLoggingFilter extends OncePerRequestFilter {

  @Override
  protected void doFilterInternal(
      @NotNull HttpServletRequest request,
      @NotNull HttpServletResponse response,
      @NotNull FilterChain filterChain)
      throws ServletException, IOException {

    try {
      setSessionIdFromCookie(request);
      setRequestIdFromHeader(request, response);
      setUserGroupFromAuthentication();
    } catch (Exception e) {
      logger.error("Failed to set MDC context", e);
    }
    try {
      filterChain.doFilter(request, response);
    } finally {
      MDC.clear();
    }
  }

  private void setUserGroupFromAuthentication() {
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    if (authentication != null && authentication.isAuthenticated()) {
      Object principal = authentication.getPrincipal();
      if (principal instanceof OidcUser oidcUser) {
        List<String> groups = oidcUser.getAttribute("groups");
        if (groups != null) {
          groups.stream()
              .filter(s -> s.matches("^/(caselaw|DS|CC-RIS).*"))
              .map(s -> s.replace("/caselaw/", ""))
              .map(s -> s.replace("/DS", "DS"))
              .map(s -> s.replace("/CC-RIS", "CC-RIS"))
              .findFirst()
              .ifPresent(userGroup -> MDC.put("doc_office_group", userGroup));
        }
      }
    }
  }

  private void setRequestIdFromHeader(
      @NotNull HttpServletRequest request, HttpServletResponse response) {
    var requestId =
        Optional.ofNullable(request.getHeader("X-Request-ID")).orElse(UUID.randomUUID().toString());
    MDC.put("request_id", requestId);
    response.setHeader("X-Request-ID", requestId);
  }

  /**
   * The session id is a random UUID that is generated by the nginx serving the frontend application
   * and set as a cookie. It is valid for 12h.
   */
  private void setSessionIdFromCookie(HttpServletRequest request) {
    Optional.ofNullable(request.getCookies())
        .flatMap(
            cookies ->
                Arrays.stream(cookies)
                    .filter(c -> "session_id".equals(c.getName()))
                    .map(Cookie::getValue)
                    .findFirst())
        .ifPresent(sessionId -> MDC.put("session_id", sessionId));
  }
}
