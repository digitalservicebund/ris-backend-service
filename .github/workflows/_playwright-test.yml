on:
  workflow_call:
    inputs:
      project:
        required: false
        type: string
        default: chromium
      runs:
        required: false
        type: string
        default: "1"
      workers:
        required: false
        type: string
    secrets:
      STAGING_URL:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  playwright-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ./frontend/package.json
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json
      - name: cache node modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: |
            ./frontend/node_modules
          key: modules-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install node modules
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: |
          npm ci
        working-directory: ./frontend
      - name: Get Playwright version
        working-directory: ./frontend
        run: echo "PLAYWRIGHT_VERSION=$(jq -r '.packages["node_modules/@playwright/test"].version' package-lock.json)" >> $GITHUB_ENV
      - name: Cache browser binaries
        id: cache-browser-binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install playwright browsers
#        if: steps.cache-browser-binaries.outputs.cache-hit != 'true'
        run: |
          browser=${{ inputs.project == 'firefox' && 'firefox' || 'chromium' }}
          echo "Installing $browser"
          npx --yes playwright install --with-deps $browser
        working-directory: ./frontend
      - name: Run ${{ inputs.project }} tests
        env:
          E2E_BASE_URL: ${{ secrets.STAGING_URL }}
          E2E_TEST_USER: ${{ secrets.E2E_TEST_USER }}
          E2E_TEST_PASSWORD: ${{ secrets.E2E_TEST_PASSWORD }}
          E2E_TEST_USER_BGH: ${{ secrets.E2E_TEST_USER_BGH }}
          E2E_TEST_PASSWORD_BGH: ${{ secrets.E2E_TEST_PASSWORD_BGH }}
          E2E_TEST_USER_EXTERNAL: ${{ secrets.E2E_TEST_USER_EXTERNAL }}
          E2E_TEST_PASSWORD_EXTERNAL: ${{ secrets.E2E_TEST_PASSWORD_EXTERNAL }}
          E2E_TEST_BASIC_AUTH_USER: ${{ secrets.E2E_TEST_BASIC_AUTH_USER }}
          E2E_TEST_BASIC_AUTH_PASSWORD: ${{ secrets.E2E_TEST_BASIC_AUTH_PASSWORD }}
          GH_PACKAGES_REPOSITORY_USER: ${{ secrets.GH_PACKAGES_REPOSITORY_USER }}
          GH_PACKAGES_REPOSITORY_TOKEN: ${{ secrets.GH_PACKAGES_REPOSITORY_TOKEN }}
        run: |
          echo "Running ${{ inputs.project }} tests ${{ inputs.runs }} times"

          workers_config=""
          if [[ ${{ inputs.workers || 'default' }} != 'default' ]]; then
            workers_config="--workers=${{ inputs.workers }}"
          fi

          reporter_config=${{ inputs.project == 'queries' && '--reporter=./test/queries/queries_log_reporter.ts' || '' }}

          npx playwright test --project ${{ inputs.project }} --repeat-each ${{ inputs.runs}} $reporter_config $workers_config --retries=3 --max-failures=5
        working-directory: ./frontend
      - name: Upload screenshots and traces of failed tests
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: failed-${{ inputs.project }}-tests
          path: |
            ./frontend/test-results/**/*.png
            ./frontend/test-results/**/trace.zip
      - name: Send failed tests to metrics endpoint
        if: always()
        run: |
          jq -r '[.suites[] | .specs[]?, .suites[]?.specs[]? | select(.tests[].status != "skipped" and .tests[].status != "expected") | [.title, .file, .tests[].status]  ] | unique[] | @tsv' test-results.json | while IFS=$'\t' read -r  test_title test_file test_status
          do
            curl -X POST ${{ secrets.E2E_TEST_METRICS_ENDPOINT }} \
                  -H "xc-token: ${{ secrets.E2E_TEST_METRICS_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"test\": \"${test_title}\", \"file\": \"${test_file}\", \"status\": \"${test_status}\", \"githubRunId\": \"${{ github.run_id }}\", \"browser\": \"${{ inputs.project }}\"}"
          done
        working-directory: ./frontend
      - name: Upload json reports
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: test-results-${{ inputs.project }}
          path: ./frontend/test-results.json
          retention-days: 1
      - name: Upload test result blobs reports
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-blob-${{ inputs.project }}
          path: ./frontend/blob-report/test-report.zip
          retention-days: 5
      - name: Send status to Slack
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: digitalservicebund/notify-on-failure-gha@814d0c4b2ad6a3443e89c991f8657b10126510bf # v1.5.0
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
