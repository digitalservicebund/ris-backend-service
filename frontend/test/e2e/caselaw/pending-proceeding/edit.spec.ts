import { expect } from "@playwright/test"
import { caselawTest as test } from "~/e2e/caselaw/fixtures"
import { navigateToCategories, save } from "~/e2e/caselaw/utils/e2e-utils"

test.describe("edit pending proceeding", () => {
  test(
    "user can edit and save inputs relevant for pending proceeding documents",
    { tag: ["@RISDEV-7774"] },
    async ({ page, pendingProceeding }) => {
      await navigateToCategories(page, pendingProceeding.documentNumber, {
        type: "pending-proceeding",
      })

      // Stammdaten

      // Gericht
      await test.step("court can be changed", async () => {
        const court = page.getByLabel("Gericht", { exact: true })
        await expect(court).toHaveValue("")
        // switch again to BFH
        await court.fill("BFH")
        await expect(page.getByTestId("combobox-spinner")).toBeHidden()
        await expect(court).toHaveValue("BFH")
        await page.getByText("BFH", { exact: true }).click()
        await expect(court).toHaveValue("BFH")
      })

      // Aktenzeichen
      await test.step("fileNumbers can be added", async () => {
        const fileNumber = page.getByLabel("Aktenzeichen", { exact: true })
        await fileNumber.fill("abc")
        await page.keyboard.press("Enter")
        await expect(
          page.getByTestId("chips-input-wrapper_fileNumber").getByText("abc"),
        ).toBeVisible()
      })

      //Mitteilungsdatum
      await test.step("decision date can be added", async () => {
        await expect(page.getByText("Mitteilungsdatum *")).toBeVisible()
        const date = page.getByLabel("Entscheidungsdatum", { exact: true })
        await expect(date).toBeVisible()
        await date.fill("24.02.2025")
        await expect(date).toHaveValue("24.02.2025")
      })

      // Spruchkörper
      await test.step("appraisal body can be edited", async () => {
        const appraisalBody = page.getByLabel("Spruchkörper", { exact: true })
        await appraisalBody.fill("abc")
        await expect(appraisalBody).toHaveValue("abc")
      })

      // Erledigungsmitteilung
      await test.step("'Erledigungsmitteilung' can be edited, automatically sets 'Erledigt' checkbox", async () => {
        const checkbox = page.getByLabel("Erledigt")
        await expect(checkbox).not.toBeChecked()
        const date = page.getByLabel("Erledigungsmitteilung", { exact: true })
        await expect(date).toBeVisible()
        await date.fill("16.06.2025")
        await expect(date).toHaveValue("16.06.2025")
        await expect(checkbox).toBeChecked()
      })

      // Abweichende Dokumentnummer
      await test.step("deviating document numbers can be added", async () => {
        const fileNumber = page.getByLabel("Abweichende Dokumentnummer", {
          exact: true,
        })
        await fileNumber.fill("abc")
        await page.keyboard.press("Enter")
        await expect(
          page
            .getByTestId("chips-input-wrapper_deviatingDocumentNumbers")
            .getByText("abc"),
        ).toBeVisible()
      })

      // CELEX-Nummer
      await test.step("celex number is readonly", async () => {
        const celexNumber = page.getByLabel("Celex-Nummer", {
          exact: true,
        })

        await expect(celexNumber).toHaveValue("")
        await expect(celexNumber).toHaveAttribute("readonly")
      })

      // Gerichtsbarkeit Finanzgerichtsbarkeit
      await test.step("'Gerichtsbarkeit' is readonly", async () => {
        const jurisdictionType = page.getByLabel("Gerichtsbarkeit", {
          exact: true,
        })
        await expect(jurisdictionType).toHaveValue("Finanzgerichtsbarkeit")
        await expect(jurisdictionType).toHaveAttribute("readonly", "")
      })

      // Region
      await test.step("'Region' is readonly", async () => {
        const jurisdictionType = page.getByLabel("Region", {
          exact: true,
        })
        await expect(jurisdictionType).toHaveValue("DEU")
        await expect(jurisdictionType).toHaveAttribute("readonly", "")
      })

      await save(page)

      // Kurztexte

      // Titelzeile
      await test.step("headline is autogenerated, user can edit headline", async () => {
        const headline = page.locator("#headline")
        await expect(
          headline.getByText("Anhängiges Verfahren beim BFH"),
        ).toBeVisible()
        await headline.click()
        await headline.getByText("Anhängiges Verfahren beim BFH").dblclick()
        await page.keyboard.press("ArrowRight")
        await page.keyboard.type(` test`)
        await expect(
          headline.getByText("Anhängiges Verfahren beim BFH test"),
        ).toBeVisible()
      })

      // Rechtsfrage
      await test.step("user can edit legal issue", async () => {
        await page.getByLabel("Rechtsfrage").click()
        const headline = page.locator("#legalIssue")
        await headline.click()
        await page.keyboard.type(`Unveröffentlichtes anhängiges Verfahren`)
        await expect(
          headline.getByText("Unveröffentlichtes anhängiges Verfahren"),
        ).toBeVisible()
      })

      // Rechtsmittelführer
      await test.step("user can edit appellant", async () => {
        const appellant = page.locator("#appellant")
        await appellant.click()
        await page.getByRole("option", { name: "Verwaltung" }).click()
        await expect(appellant.getByText("Verwaltung")).toBeVisible()
      })

      // Rechtsmittelzulassung
      await test.step("user can edit admissionOfAppeal", async () => {
        const admissionOfAppeal = page.locator("#admissionOfAppeal")
        await admissionOfAppeal.click()
        await page.getByRole("option", { name: "Zulassung durch BFH" }).click()
        await expect(
          admissionOfAppeal.getByText("Zulassung durch BFH"),
        ).toBeVisible()
      })

      // Erledigungsvermerk
      await test.step("user can edit resolutionNote", async () => {
        await page
          .getByTestId("Erledigungsvermerk")
          .getByTestId("category-wrapper-button")
          .click()
        const resolutionNote = page
          .locator("#resolutionNote")
          .getByTestId("Erledigungsvermerk")

        await resolutionNote.click()
        await page.keyboard.type(`Test`)
        await expect(resolutionNote.getByText("Test")).toBeVisible()
      })

      await save(page)
    },
  )

  test(
    "user can edit and save celex number for eugh decisions",
    { tag: ["@RISDEV-8469"] },
    async ({ page, pendingProceeding }) => {
      await navigateToCategories(page, pendingProceeding.documentNumber, {
        type: "pending-proceeding",
      })

      await test.step("set court to eug", async () => {
        const court = page.getByLabel("Gericht", { exact: true })
        await expect(court).toHaveValue("")
        await court.fill("EuGH")
        await expect(page.getByTestId("combobox-spinner")).toBeHidden()
        await expect(court).toHaveValue("EuGH")
        await page.getByText("EuGH", { exact: true }).click()
        await expect(court).toHaveValue("EuGH")
      })

      // CELEX-Nummer
      await test.step("celex number can be added", async () => {
        const celexNumber = page.getByLabel("Celex-Nummer", {
          exact: true,
        })
        await celexNumber.fill("abc")

        await expect(celexNumber).toHaveValue("abc")
      })

      await save(page)
    },
  )
})
