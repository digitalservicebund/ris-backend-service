import { expect } from "@playwright/test"
import { caselawTest as test } from "~/e2e/caselaw/fixtures"
import { navigateToCategories, save } from "~/e2e/caselaw/utils/e2e-utils"

test.describe("edit pending proceeding", () => {
  test(
    "user can edit and save inputs relevant for pending proceeding documents",
    { tag: ["@RISDEV-7774"] },
    async ({ page, pendingProceeding }) => {
      await navigateToCategories(page, pendingProceeding.documentNumber, {
        type: "pending-proceeding",
      })

      // Formaldaten

      // Gericht
      await test.step("court can be changed", async () => {
        const court = page.getByLabel("Gericht", { exact: true })
        await expect(court).toHaveValue("")
        // switch again to BFH
        await court.fill("BFH")
        await expect(page.getByTestId("combobox-spinner")).toBeHidden()
        await expect(court).toHaveValue("BFH")
        await page.getByText("BFH", { exact: true }).click()
        await expect(court).toHaveValue("BFH")
      })

      // Aktenzeichen
      await test.step("fileNumbers can be added", async () => {
        const fileNumber = page.getByLabel("Aktenzeichen", { exact: true })
        await fileNumber.fill("abc")
        await page.keyboard.press("Enter")
        await expect(
          page.getByTestId("chips-input-wrapper_fileNumber").getByText("abc"),
        ).toBeVisible()
      })

      //Mitteilungsdatum
      await test.step("decision date can be added", async () => {
        await expect(page.getByText("Mitteilungsdatum *")).toBeVisible()
        const date = page.getByLabel("Entscheidungsdatum", { exact: true })
        await expect(date).toBeVisible()
        await date.fill("24.02.2025")
        await expect(date).toHaveValue("24.02.2025")
      })

      // Spruchkörper
      await test.step("appraisal body can be edited", async () => {
        const appraisalBody = page.getByLabel("Spruchkörper", { exact: true })
        await appraisalBody.fill("abc")
        await expect(appraisalBody).toHaveValue("abc")
      })

      // Erledigungsmitteilung
      await test.step("'Erledigungsmitteilung' can be edited, automatically sets 'Erledigt' checkbox", async () => {
        const checkbox = page.getByLabel("Erledigt")
        await expect(checkbox).not.toBeChecked()
        const date = page.getByLabel("Erledigungsmitteilung", { exact: true })
        await expect(date).toBeVisible()
        await date.fill("16.06.2025")
        await expect(date).toHaveValue("16.06.2025")
        await expect(checkbox).toBeChecked()
      })

      // Abweichende Dokumentnummer
      await test.step("deviating document numbers can be added", async () => {
        const fileNumber = page.getByLabel("Abweichende Dokumentnummer", {
          exact: true,
        })
        await fileNumber.fill("abc")
        await page.keyboard.press("Enter")
        await expect(
          page
            .getByTestId("chips-input-wrapper_deviatingDocumentNumbers")
            .getByText("abc"),
        ).toBeVisible()
      })

      // Gerichtsbarkeit Finanzgerichtsbarkeit
      await test.step("'Gerichtsbarkeit' is readonly", async () => {
        const jurisdictionType = page.getByLabel("Gerichtsbarkeit", {
          exact: true,
        })
        await expect(jurisdictionType).toHaveValue("Finanzgerichtsbarkeit")
        await expect(jurisdictionType).toHaveAttribute("readonly", "")
      })

      // Region
      await test.step("'Region' is readonly", async () => {
        const jurisdictionType = page.getByLabel("Region", {
          exact: true,
        })
        await expect(jurisdictionType).toHaveValue("DEU")
        await expect(jurisdictionType).toHaveAttribute("readonly", "")
      })

      await save(page)

      // Kurztexte

      // Titelzeile
      await test.step("headline is autogenerated, user can edit headline", async () => {
        const headline = page.locator("#headline")
        await expect(
          headline.getByText("Anhängiges Verfahren beim BFH"),
        ).toBeVisible()
        await headline.click()
        await headline.getByText("Anhängiges Verfahren beim BFH").dblclick()
        await page.keyboard.press("ArrowRight")
        await page.keyboard.type(` test`)
        await expect(
          headline.getByText("Anhängiges Verfahren beim BFH test"),
        ).toBeVisible()
      })

      // Rechtsfrage
      await test.step("user can edit legal issue", async () => {
        await page.getByLabel("Rechtsfrage").click()
        const headline = page.locator("#legalIssue")
        await headline.click()
        await page.keyboard.type(`Unveröffentlichtes anhängiges Verfahren`)
        await expect(
          headline.getByText("Unveröffentlichtes anhängiges Verfahren"),
        ).toBeVisible()
      })

      // Rechtsmittelführer
      await test.step("user can edit appellant", async () => {
        const appellant = page.locator("#appellant")
        await appellant.click()
        await page.getByRole("option", { name: "Verwaltung" }).click()
        await expect(appellant.getByText("Verwaltung")).toBeVisible()
      })

      // Rechtsmittelzulassung
      await test.step("user can edit admissionOfAppeal", async () => {
        const admissionOfAppeal = page.locator("#admissionOfAppeal")
        await admissionOfAppeal.click()
        await page.getByRole("option", { name: "Zulassung durch BFH" }).click()
        await expect(
          admissionOfAppeal.getByText("Zulassung durch BFH"),
        ).toBeVisible()
      })

      // Erledigungsvermerk
      await test.step("user can edit resolutionNote", async () => {
        await page
          .getByTestId("Erledigungsvermerk")
          .getByTestId("category-wrapper-button")
          .click()
        const resolutionNote = page
          .locator("#resolutionNote")
          .getByTestId("Erledigungsvermerk")

        await resolutionNote.click()
        await page.keyboard.type(`Test`)
        await expect(resolutionNote.getByText("Test")).toBeVisible()
      })

      await save(page)
    },
  )

  test(
    'Bearbeitung der Rubrik "Schlagwörter" in einem anhängigen Verfahren',
    { tag: ["@RISDEV-7774", "@RISDEV-9006"] },
    async ({ page, pendingProceeding }) => {
      const keywords = [
        "Größer > als",
        "”Test-Case_01”",
        "'Dev@Ops2025'",
        "User*Role+Admin",
        "Security~Patch_#9",
        "Compliance=ISO27001",
        "Prod:Release;V2.0",
      ]
      const newKeywords = [
        "Größer > als",
        "”Test-Case_01”",
        "'Dev@Ops2025'",
        "User*Role+Admin",
        "Security~Patch_#9",
        "Compliance=ISO27001",
        "Special_Quotes",
      ]
      const newKeywordsAlphabetically = [
        "'Dev@Ops2025'",
        "”Test-Case_01”",
        "Compliance=ISO27001",
        "Größer > als",
        "Security~Patch_#9",
        "Special_Quotes",
        "User*Role+Admin",
      ]
      await test.step("Navigiere zu Rubriken", async () => {
        await navigateToCategories(page, pendingProceeding.documentNumber, {
          type: "pending-proceeding",
        })
      })

      await test.step("Klicke in der linken Navigationsleiste auf „Inhaltliche Erschließung”.", async () => {
        await page
          .getByRole("link", { name: "Inhaltliche Erschließung" })
          .click()
        await expect(
          page.getByRole("heading", { name: "Inhaltliche Erschließung" }),
        ).toBeInViewport()
      })

      await test.step("Trage „Dies & Das” als Schlagwort ein und klicke anschließend auf „Übernehmen”.", async () => {
        const button = page
          .getByTestId("category-wrapper-button")
          .getByText(/Schlagwörter/)
        await expect(button).toBeVisible()
        await button.click()
        await page.getByLabel("Schlagwörter Input").fill("Dies & Das")
        await page.getByLabel("Schlagwörter übernehmen").click()
        await save(page)
      })

      await test.step("In der Vorschau steht „Dies & Das”.", async () => {
        await page.getByLabel("Seitenpanel öffnen").click()
        const preview = page.getByTestId("preview")
        await expect(preview.getByText(/Dies & Das/i)).toBeVisible()
      })

      await test.step(
        "Trage die Wörter „Größer > als“, „”Test-Case_01”“, „'Dev@Ops2025'“, „User*Role+Admin“," +
          " „Security~Patch_#9“, „Compliance=ISO27001“ und „Prod:Release;V2.0“ als Schlagwörter ein.",
        async () => {
          await page.getByLabel("Schlagwörter bearbeiten").click()
          const input = page.getByLabel("Schlagwörter Input")
          await input.clear()
          await input.click()

          for (const keyword of keywords) {
            await page.keyboard.type(keyword)
            await page.keyboard.press("Enter")
          }
          await page.getByLabel("Schlagwörter übernehmen").click()
          await save(page)
        },
      )

      await test.step("Die Schlagwörter werden korrekt aufgelistet", async () => {
        const keywordContainer = page.getByTestId("keywords")
        const listItems = keywordContainer.locator(
          "ul.m-0.flex.flex-row.flex-wrap.gap-8.p-0 > li",
        )
        await expect(listItems).toHaveCount(keywords.length)
        const actualTexts = await listItems.allTextContents()
        expect(actualTexts).toEqual(keywords)
      })

      await test.step("In der Vorschau stehen alle Schlagwörter korrekt", async () => {
        const preview = page.getByTestId("preview")
        const actualKeywords = preview.locator(
          "div.ris-body1-regular.text-black > div",
        )
        await expect(actualKeywords).toHaveCount(keywords.length)
        const actualTexts = await actualKeywords.allTextContents()
        expect(actualTexts).toEqual(keywords)
      })

      await test.step("Ersetze das Schlagwort „Prod:Release;V2.0“ durch das Schlagwort „Special_Quotes”.", async () => {
        await page.getByLabel("Schlagwörter bearbeiten").click()
        const input = page.getByLabel("Schlagwörter Input")
        await input.click()
        const currentValue = await input.inputValue()
        const newValue = currentValue.replace(
          "Prod:Release;V2.0",
          "Special_Quotes",
        )
        await input.fill(newValue)
        await page.getByLabel("Schlagwörter übernehmen").click()
        await save(page)
      })

      await test.step("Die neuen Schlagwörter werden korrekt aufgelistet.", async () => {
        const keywordContainer = page.getByTestId("keywords")
        const listItems = keywordContainer.locator(
          "ul.m-0.flex.flex-row.flex-wrap.gap-8.p-0 > li",
        )
        await expect(listItems).toHaveCount(newKeywords.length)
        const actualTexts = await listItems.allTextContents()
        expect(actualTexts).toEqual(newKeywords)
      })

      await test.step("In der Vorschau stehen alle neuen Schlagwörter korrekt.", async () => {
        const preview = page.getByTestId("preview")
        const actualKeywords = preview.locator(
          "div.ris-body1-regular.text-black > div",
        )
        await expect(actualKeywords).toHaveCount(newKeywords.length)
        const actualTexts = await actualKeywords.allTextContents()
        expect(actualTexts).toEqual(newKeywords)
      })

      await test.step("Die Schlagwörter werden alphabetisch sortiert übernommen.", async () => {
        await page.getByLabel("Schlagwörter bearbeiten").click()
        await page.getByLabel("Alphabetisch sortieren").click()
        await page.getByLabel("Schlagwörter übernehmen").click()
        await save(page)
      })

      await test.step("Die Schlagwörter werden korrekt alphabetisch aufgelistet.", async () => {
        const keywordContainer = page.getByTestId("keywords")
        const listItems = keywordContainer.locator(
          "ul.m-0.flex.flex-row.flex-wrap.gap-8.p-0 > li",
        )
        await expect(listItems).toHaveCount(newKeywordsAlphabetically.length)
        const actualTexts = await listItems.allTextContents()
        expect(actualTexts).toEqual(newKeywordsAlphabetically)
      })

      await test.step("In der Vorschau stehen alle Schlagwörter alphabetisch korrekt.", async () => {
        const preview = page.getByTestId("preview")
        const actualKeywords = preview.locator(
          "div.ris-body1-regular.text-black > div",
        )
        await expect(actualKeywords).toHaveCount(
          newKeywordsAlphabetically.length,
        )
        const actualTexts = await actualKeywords.allTextContents()
        expect(actualTexts).toEqual(newKeywordsAlphabetically)
      })

      await test.step("Lösche alle Schlagwörter.", async () => {
        await page.getByLabel("Schlagwörter bearbeiten").click()
        await page.getByLabel("Schlagwörter Input").clear()
        await page.getByLabel("Schlagwörter übernehmen").click()
        await save(page)
      })

      await test.step("Die Schlagwörter sind aus der Liste und der Vorschau entfernt.", async () => {
        const keywordContainer = page.getByTestId("keywords")
        await expect(keywordContainer).toBeHidden()
        await expect(
          page.getByTestId("category-wrapper-button").getByText(/Schlagwörter/),
        ).toBeVisible()
        await expect(
          page.getByTestId("preview").getByText("Schlagwörter"),
        ).toBeHidden()
      })

      await test.step("Das Schlagwort „TestDuplicat?“ wird zwei mal eingetragen.", async () => {
        await page
          .getByTestId("category-wrapper-button")
          .getByText(/Schlagwörter/)
          .click()
        const input = page.getByLabel("Schlagwörter Input")
        await input.click()
        await page.keyboard.type("TestDuplicat?")
        await page.keyboard.press("Enter")
        await page.keyboard.type("TestDuplicat?")
        await page.getByLabel("Schlagwörter übernehmen").click()
        await save(page)
      })

      await test.step("Das Schlagwort wird nur einmal aufgelistet.", async () => {
        const keywordContainer = page.getByTestId("keywords")
        const listItems = keywordContainer.locator(
          "ul.m-0.flex.flex-row.flex-wrap.gap-8.p-0 > li",
        )
        await expect(listItems).toHaveCount(1)
        const actualTexts = await listItems.allTextContents()
        expect(actualTexts[0]).toEqual("TestDuplicat?")
      })

      await test.step("In der Vorschau ist das Schlagwort nur einmal aufgelistet.", async () => {
        const preview = page.getByTestId("preview")
        const actualKeywords = preview.locator(
          "div.ris-body1-regular.text-black > div",
        )
        await expect(actualKeywords).toHaveCount(1)
        const actualTexts = await actualKeywords.allTextContents()
        expect(actualTexts).toEqual(["TestDuplicat?"])
      })
    },
  )
})
